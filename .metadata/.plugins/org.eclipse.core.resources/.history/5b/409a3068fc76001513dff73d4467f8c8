package sea.nlp.pos;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * @author Sagar
 *
 */
public class POSTaggerMain {
	private static final String INPUT = "input.txt";
	private static final String OUTPUT = "output.txt";
	private POS pos;

	public POSTaggerMain() {
		pos = new POS();
	}

	public static void main(String[] args) {
		POSTaggerMain tagger = new POSTaggerMain();
		
		try {
			System.out.println("************************\nPOS Tagger\n************************");
			System.out.println("Press enter when you are ready with the input file.");
			new BufferedReader(new InputStreamReader(System.in)).readLine();
			
			// Read the input training file that is correctly tagged
			tagger.getWordTags();
			
			// Re-tag the input file and generate an output file with supposedly correct tags
			tagger.reTag();
			
			// Show the error rate
			System.out.println("Error Rate:: " + tagger.getErrorRate());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void getWordTags() throws FileNotFoundException {
		Scanner scanner = new Scanner(new File(INPUT));

		while (scanner.hasNext()) {
			String token = scanner.next();
			String word = token.split("_")[0];
			String tag = token.split("_")[1];

			pos.addWord(word, tag);
		}
		scanner.close();
	}

	public void reTag() throws FileNotFoundException {
		Scanner scanner = new Scanner(new File(INPUT));

		PrintWriter writer = new PrintWriter(OUTPUT);

		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();
			for (String token : line.split(" ")) {
				String word = token.split("_")[0];
				String tag = token.split("_")[1];
				String correctTag = pos.getCorrectTag(word);

				if (!tag.equals(correctTag)) {
					pos.incrementErrorCounter(word);
				}
				writer.write(token.split("_")[0] + "_" + correctTag + " ");
			}
			writer.println();
		}

		writer.close();
		scanner.close();

	}
	
	public float getErrorRate() {
		return (float) pos.getErrorCount() / pos.getWordCount();
	}

	public POS getPos() {
		return pos;
	}

	public void setPos(POS pos) {
		this.pos = pos;
	}
}
