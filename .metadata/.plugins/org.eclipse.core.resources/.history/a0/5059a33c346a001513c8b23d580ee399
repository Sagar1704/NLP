package sea.nlp.ngram;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

/**
 * This class takes tokenized corpus as input. It generates the output as 4
 * files: 1. Unsmoothed Unigram probabilities 2. Unsmoothed Bigram probabilities
 * 3. Smoothed Unigram probabilities 4. Smoothed Bigram probabilities
 * 
 * @author Sagar
 *
 */
public class NGramMain {
	private StringBuilder output;
	private List<Unigram> unigrams;
	
	private static File input = new File("input.txt");

	public NGramMain() {
		setOutput(new StringBuilder());
	}

	public static void main(String[] args) {
		NGramMain ngram = new NGramMain();
		Scanner scan = new Scanner(System.in);
		char continueChoice = 0;

		System.out.println("This program will calculate the NGram proabilities.");
		do {
			try {
				System.out.println("Please do these pre-requisites:");
				Thread.sleep(2000);
				System.out.println(
						"(1) Make sure that you create a file name \"input.txt\" in the same folder as the jar that you executed.");
				Thread.sleep(1000);
				System.out.println("(2) The above file should contain the corpus.");
				Thread.sleep(1000);
				System.out.println("Are you sure you have the file ready? (y/n)");

				continueChoice = scan.next().charAt(0);
			} catch (InterruptedException e) {
				e.printStackTrace();
			} finally {
				scan.close();
			}

		} while (continueChoice != 'y' || continueChoice != 'Y');
		
		Unigram unigram = new Unigram();
		
	}

	public void generateUnigrams() throws FileNotFoundException {

		unigrams = new ArrayList<Unigram>();
		Scanner scanner = new Scanner(input);
		try {
			while (scanner.hasNextLine()) {
				Unigram.totalUnigramCount++;
				
				String token = scanner.nextLine();
				ArrayList<String> tempList = new ArrayList<String>();
				tempList.add(token);
				Unigram unigram = new Unigram(tempList);
				if (!unigrams.contains(unigram)) {
					unigrams.add(unigram);
				} else {
					unigram = unigrams.get(unigrams.indexOf(unigram));
					unigram.setCount(unigram.getCount() + 1);
				}
			}
		} finally {
			scanner.close();
		}
	}
	
	public void calculateUnsmoothedProbability() {
		for (Iterator<Unigram> unigramIterator = unigrams.iterator(); unigramIterator.hasNext();) {
			Unigram unigram = (Unigram) unigramIterator.next();
			
			unigram.setProbability(unigram.getCount() / Unigram.totalUnigramCount);
		}
		
		return unigrams;
	}
	
	public StringBuilder getOutput() {
		return output;
	}

	public void setOutput(StringBuilder output) {
		this.output = output;
	}

}
