package sea.nlp.pos;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Scanner;
import java.util.TreeSet;

import sea.nlp.comparator.Counter;

/**
 * POS Tagging scans for the tags. Finds the count of the tags given a word.
 * Generates corpus by correcting the tags. Finds the errors of the tags. And
 * generate the rules for the errors.
 * 
 * @author Sagar
 *
 */
public class POSTagging {
	public static final String INPUT = "input.txt";
	public static final String OUTPUT = "ReTaggedTrainingSet.txt";
	public static int tokenCounter = 0;
	public static int errorCounter = 0;

	private HashMap<String, TreeSet<TagCounter>> wordTagMap;
	private ArrayList<WordError> tagErrors;

	public POSTagging() {
		this.wordTagMap = new HashMap<String, TreeSet<TagCounter>>();
		this.tagErrors = new ArrayList<WordError>();
	}

	public static void main(String[] args) {
		System.out.println("****************************************************************");
		System.out.println("POS Tagging");
		System.out.println("****************************************************************");

		while (true) {
			try {
				System.out.println("Press enter when you are ready with the input file.");
				new BufferedReader(new InputStreamReader(System.in)).readLine();

				POSTagging tagger = new POSTagging();

				// Analyze the training set
				System.out.println("Analyzing the training set");
				Thread.sleep(1000);
				tagger.readInput();

				// Re-tag the training set
				System.out.println("Re-tagging the training set");
				Thread.sleep(1000);
				tagger.reTag();
				System.out.println("Please check " + OUTPUT + " to check the output of the re tagging.");
				Thread.sleep(1000);

				// Get the error rate
				System.out.println("The error rate of the training set is:: " + tagger.getErrorRate());
				Thread.sleep(1000);

				System.out.println("The Top 5 erroneously tagged words are::");
				tagger.getTopErroneuosTags(5);
				System.out.println("\n**************Done***************");
				System.out.println("Close the window to exit!");
				new BufferedReader(new InputStreamReader(System.in)).readLine();
			} catch (FileNotFoundException e) {
				System.out.println("\nThe file named \"input.txt\" cannot be found in the path."
						+ "\n\nPlease make sure the file is present in the directory where you are running the \"POSTagger.jar\" file.\n");
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * Scans through the Training set and counts the tags for a word
	 * 
	 * @throws FileNotFoundException
	 */
	private void readInput() throws FileNotFoundException {
		Scanner scanner = new Scanner(new File(INPUT));
		
		while (scanner.hasNext()) {
			tokenCounter++;
			String token = scanner.next();
			String word = token.split("_")[0];
			TagCounter tag = new TagCounter(token.split("_")[1]);
//			TreeSet<TagCounter> tags = new TreeSet<TagCounter>(new Counter());
//			tags.add(tag);
			if (!wordTagMap.containsKey(word)) {
				TreeSet<TagCounter> tags = new TreeSet<TagCounter>(new Counter());
				tags.add(tag);
				wordTagMap.put(word, tags);
			} else {
				tags = wordTagMap.get(word);
				for (TagCounter tagCounter : tags) {
					if (tagCounter.getTag().equals(tag.getTag())) {
						tagCounter.setCounter(tagCounter.getCounter() + 1);
						tags.add(tagCounter);
						wordTagMap.put(word, tags);
						break;
					}
				}
			}

		}
		
		scanner.close();

	}

	/**
	 * Re Tag the input file tokens based on the analysis of tags
	 * 
	 * @throws FileNotFoundException
	 */
	private void reTag() throws FileNotFoundException {
		Scanner scanner = new Scanner(new File(INPUT));

		PrintWriter writer = new PrintWriter(OUTPUT);

		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();
			for (String token : line.split(" ")) {
				String correctTag = wordTagMap.get(token.split("_")[0]).first().getTag();
				if (!token.split("_")[1].equals(correctTag)) {
					errorCounter++;
					WordError tagError = new WordError(token.split("_")[0]);
					if (tagErrors.contains(tagError)) {
						tagError = tagErrors.get(tagErrors.indexOf(tagError));
						tagError.setErrorCount(tagError.getErrorCount() + 1);
					}
				}
				writer.write(token.split("_")[0] + "_" + correctTag + " ");
			}
			writer.println();
		}

		writer.close();
		scanner.close();
	}

	/**
	 * Get the tagged error rate
	 * 
	 * @return
	 */
	private float getErrorRate() {
		if (tokenCounter != 0)
			return errorCounter / tokenCounter;
		return 0.0f;
	}

	/**
	 * Get the top erroneous words
	 * 
	 * @param top
	 */
	private void getTopErroneuosTags(int top) {
		Collections.sort(tagErrors);
		for (int i = 0; i < (top < tagErrors.size() ? top : tagErrors.size()); i++) {
			System.out.println(tagErrors.get(i).getWord() + " :: " + tagErrors.get(i).getErrorCount());
		}
	}

	/**
	 * Generate Tagging rules based on the erroneously tagged words
	 */
	private void generateTaggingRules() {

	}

}
