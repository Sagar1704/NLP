package nlp.sea.lesk;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class SimplifiedLesk {
	private static final String INPUT = "input.txt";
	private static final String WORDSENSE = "wordsense.txt";
	private String word;
	private String[] context;

	public String getWord() {
		return word;
	}

	public void setWord(String word) {
		this.word = word;
	}
	
	public String[] getContext() {
		return context;
	}

	public void setContext(String[] context) {
		this.context = context;
	}

	public static void main(String[] args) {
		SimplifiedLesk lesk = new SimplifiedLesk();

		try {
			lesk.readInput(new File(INPUT));
			System.out.println("Given Word :: " + lesk.getWord());
			System.out.println("Given Sentence :: " + String.join(" ", lesk.getContext()));
			System.out.println("The best Sense is:: " + lesk.simplifiedLesk());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}

	private void readInput(File input) throws FileNotFoundException {
		Scanner scanner = new Scanner(input);

		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();

			if (line.charAt(0) == '#')
				continue;

			String[] tokens = line.split("#");
			word = tokens[0];
			context = tokens[1].split(" ");
			break;
		}

		scanner.close();
	}

	public String simplifiedLesk() throws FileNotFoundException {
		String bestSense = "";
		int maxOverlap = 0;

		Scanner scanner = new Scanner(new File(WORDSENSE));
		while (scanner.hasNextLine()) {
			String line = scanner.nextLine();

			if (line.charAt(0) == '#')
				continue;

			String[] tokens = line.split("#");
			int priority = tokens.length > 0 ? (Integer.parseInt(tokens[0])) : -1;
			String gloss = tokens.length > 1 ? tokens[1] : "";
			String example = tokens.length > 2 ? tokens[2] : "";
			Sense sense = new Sense(priority, gloss, example);
			String[] signature = sense.getSignature();

			int overlap = sense.computeOverlap(context, signature);
			;
			if (overlap > maxOverlap) {
				maxOverlap = overlap;
				bestSense = word + sense.getPriority();
			}
		}
		scanner.close();

		return bestSense;
	}

}
